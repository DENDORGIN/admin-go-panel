package routes

import (
	"backend/internal/adminpanel/db/postgres"
	"backend/internal/adminpanel/entities"
	"backend/internal/adminpanel/models"
	"backend/internal/adminpanel/services/utils"
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"log"
	"net/http"
)

func CreateEventHandler(ctx *gin.Context) {

	userID, ok := utils.GetUserIDFromContext(ctx)
	if !ok {
		return
	}

	var event entities.Calendar
	if err := ctx.ShouldBindJSON(&event); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	event.UserID = userID

	newEvent, err := models.CreateEvent(&event)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	ctx.JSON(http.StatusCreated, newEvent)
}

func UpdateCalendarEventHandler(ctx *gin.Context) {
	userID, ok := utils.GetUserIDFromContext(ctx)
	if !ok {
		return
	}

	eventIdStr := ctx.Param("id")
	if eventIdStr == "" {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Event ID is required"})
		return
	}

	eventId, err := uuid.Parse(eventIdStr)
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid Event ID format"})
		return
	}
	var updateEvent models.CalendarEventUpdate
	if err = ctx.ShouldBindJSON(&updateEvent); err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	event, err := models.GetEventById(eventId)
	if err != nil {
		ctx.JSON(http.StatusNotFound, gin.H{"error": "Event not found"})
		return
	}
	if event.UserID != userID {
		ctx.JSON(http.StatusForbidden, gin.H{"error": "You are not authorized to update this event"})
		return
	}

	updatedEvent, err := models.CalendarUpdateEvent(eventId, &updateEvent)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, updatedEvent)

}

func GetAllEventsHandler(ctx *gin.Context) {
	userID, ok := utils.GetUserIDFromContext(ctx)
	if !ok {
		return
	}

	events, err := models.GetAllEvents(userID)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	ctx.JSON(http.StatusOK, events)
}

func DeleteEvent(ctx *gin.Context) {
	userID, ok := utils.GetUserIDFromContext(ctx)
	if !ok {
		return
	}

	eventIdStr := ctx.Param("id")
	if eventIdStr == "" {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Event ID is required"})
		return
	}

	eventId, err := uuid.Parse(eventIdStr)
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid Event ID format"})
		return
	}

	getEvent, err := models.GetEventById(eventId)
	if err != nil {
		ctx.JSON(http.StatusNotFound, gin.H{"error": "Event not found"})
		return
	}

	if getEvent.UserID != userID {
		ctx.JSON(http.StatusUnauthorized, gin.H{"error": "Unauthorized to delete this event"})
		return
	}

	err = models.DeleteEventById(eventId)
	if err != nil {
		ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	ctx.JSON(http.StatusOK, gin.H{"message": "Event deleted successfully"})

}

func SendReminders() {
	events, err := models.GetUpcomingReminders()
	if err != nil {
		log.Println("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π:", err)
		return
	}

	if len(events) == 0 {
		log.Println("‚úÖ –ù–µ–º–∞—î –ø–æ–¥—ñ–π –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.")
		return
	}

	log.Printf("üîî –ó–Ω–∞–π–¥–µ–Ω–æ %d –ø–æ–¥—ñ–π –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è.\n", len(events))
	for _, event := range events {

		user, err := models.GetUserById(event.UserID)
		if err != nil {
			log.Printf("‚ö†Ô∏è –ü–æ–¥—ñ—è '%s' –Ω–µ –º–∞—î email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n", event.Title)
			continue
		}

		subject := fmt.Sprintf("üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: %s", event.Title)
		message := fmt.Sprintf(`
			<h3>–ü—Ä–∏–≤—ñ—Ç, %s!</h3>
			<p>–ù–∞–≥–∞–¥—É—î–º–æ, —â–æ –ø–æ–¥—ñ—è <strong>%s</strong> —Ä–æ–∑–ø–æ—á–Ω–µ—Ç—å—Å—è <strong>%s</strong>.</p>
			<p>–î–µ—Ç–∞–ª—ñ: %s</p>
			<hr>
			<p><em>–¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ù–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–π—Ç–µ –Ω–∞ –Ω—å–æ–≥–æ.</em></p>`,
			user.Email, event.Title, event.StartDate.Format("02.01.2006 15:04"), event.Description,
		)

		err = utils.SendEmail(user.Email, subject, message, true)
		if err != nil {
			log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –¥–ª—è –ø–æ–¥—ñ—ó '%s' (%s): %v\n", event.Title, event.User.Email, err)
		} else {
			log.Printf("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: %s (%s)\n", event.Title, event.User.Email)
		}
		err = postgres.DB.Model(&entities.Calendar{}).Where("id = ?", event.ID).Update("send_email", true).Error
		if err != nil {
			log.Printf("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–ª—è SendEmail –¥–ª—è –ø–æ–¥—ñ—ó '%s': %v\n", event.Title, err)
		} else {
			log.Printf("‚úÖ –ü–æ–ª–µ SendEmail –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥—ñ—ó '%s'.\n", event.Title)
		}

	}
}
