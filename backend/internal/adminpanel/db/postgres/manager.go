package postgres

import (
	"backend/internal/adminpanel/entities"
	"backend/internal/adminpanel/services/utils"
	"fmt"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
	"sync"
)

type DBManager struct {
	mu          sync.RWMutex
	connections map[string]*gorm.DB
	tenantCache map[string]entities.Tenant
}

var Manager = &DBManager{
	connections: make(map[string]*gorm.DB),
	tenantCache: make(map[string]entities.Tenant),
}

// –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î —Ç–µ–Ω—Ç–∞–Ω—Ç–∞
func (m *DBManager) GetConnectionByDomain(domain string) (*gorm.DB, error) {
	var tenant entities.Tenant

	// 1. –®—É–∫–∞—î–º–æ tenant —É –∫–µ—à—ñ
	m.mu.RLock()
	cachedTenant, found := m.tenantCache[domain]
	m.mu.RUnlock()

	if found {
		tenant = cachedTenant
	} else {
		// 2. –Ø–∫—â–æ –Ω–µ–º–∞ ‚Äî —Ç—è–≥–Ω–µ–º–æ –∑ –≥–æ–ª–æ–≤–Ω–æ—ó –ë–î
		err := GetDB().Where("domain = ?", domain).First(&tenant).Error
		if err != nil {
			return nil, fmt.Errorf("tenant not found: %w", err)
		}

		// 3. –ö–ª–∞–¥–µ–º–æ –≤ –∫–µ—à
		m.mu.Lock()
		m.tenantCache[domain] = tenant
		m.mu.Unlock()
	}
	if !tenant.Status {
		return nil, fmt.Errorf("tenant inactive")
	}

	// 4. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
	if conn, exists := Pool.Get(domain); exists {
		return conn, nil
	}

	// 5. –†–æ–∑—à–∏—Ñ—Ä–æ–≤—É—î–º–æ –¥–∞–Ω—ñ
	tenantCreds, err := utils.DecryptTenantCreds(&tenant)
	if err != nil {
		return nil, fmt.Errorf("failed to decrypt tenant credentials: %w", err)
	}

	// 6 –§–æ—Ä–º—É—î–º–æ DSN
	dsn := fmt.Sprintf(
		"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=Europe/Warsaw",
		tenantCreds.DBHost, tenantCreds.DBUser, tenantCreds.DBPassword, tenantCreds.DBName, tenant.DBPort,
	)

	// 7. –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		return nil, fmt.Errorf("failed to connect to tenant DB: %w", err)
	}

	// 8. –ö–µ—à—É—î–º–æ —á–µ—Ä–µ–∑ –ø—É–ª
	Pool.Set(domain, db)
	return db, nil
}

// –û—á–∏—Å—Ç–∏—Ç–∏ –∫–µ—à —Ç–µ–Ω—Ç–∞–Ω—Ç–∞ –∑–∞ –¥–æ–º–µ–Ω–æ–º
func (m *DBManager) ClearTenantCache(domain string) {
	m.mu.Lock()
	defer m.mu.Unlock()
	delete(m.tenantCache, domain)
	Pool.Delete(domain) // üí° –æ—á–∏—â–∞—î–º–æ —ñ –ø—É–ª
}

func (m *DBManager) TenantFromCache(domain string) entities.Tenant {
	m.mu.RLock()
	defer m.mu.RUnlock()
	return m.tenantCache[domain]
}
