package chat

import (
	"backend/cmd/chat/rooms"
	"backend/internal/adminpanel/entities"
	"backend/internal/adminpanel/services/utils"
	"encoding/json"
	"fmt"
	"github.com/google/uuid"
	"log"
	"net/http"
	"sync"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket"
)

// –ü—ñ–¥–∫–ª—é—á–µ–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∏ {chatID: [WebSocket-–∑'—î–¥–Ω–∞–Ω–Ω—è]}
var clients = make(map[uuid.UUID]map[*websocket.Conn]bool)
var mutex = sync.Mutex{}

// –û–Ω–æ–≤–ª—é–≤–∞—á WebSocket-–∑'—î–¥–Ω–∞–Ω–Ω—è
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true
	},
}

type MessagePayload struct {
	RoomId  uuid.UUID `json:"room_id"`
	UserId  uuid.UUID `json:"user_id"`
	Message string    `json:"message"`
}

func HandleWebSocket(ctx *gin.Context) {
	token := ctx.Query("token")
	_, err := utils.VerifyResetToken(token)
	if err != nil {
		ctx.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
		return
	}

	db, ok := utils.GetDBFromContext(ctx)
	if !ok {
		return
	}

	roomID, err := uuid.Parse(ctx.Query("room_id"))
	if err != nil {
		ctx.JSON(http.StatusBadRequest, gin.H{"error": "Invalid room_id"})
		return
	}

	user, err := utils.ParseJWTToken(token)
	if err != nil {
		ctx.JSON(http.StatusUnauthorized, gin.H{"error": "Invalid token"})
		return
	}

	fmt.Printf("–ö–ª—ñ—î–Ω—Ç –∑ ID %s –ø—ñ–¥–∫–ª—é—á–∏–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ %s\n", user.ID, roomID)

	conn, err := upgrader.Upgrade(ctx.Writer, ctx.Request, nil)
	if err != nil {
		fmt.Println("–ü–æ–º–∏–ª–∫–∞ WebSocket:", err)
		return
	}
	defer func(conn *websocket.Conn) {
		err := conn.Close()
		if err != nil {

		}
	}(conn)

	// –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –º–∞–ø—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
	mutex.Lock()
	if clients[roomID] == nil {
		clients[roomID] = make(map[*websocket.Conn]bool)
	}
	clients[roomID][conn] = true
	mutex.Unlock()

	// üîπ –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∫—ñ–º–Ω–∞—Ç–∏
	history, err := rooms.GetAllMessages(db, roomID)
	if err != nil {
		log.Println("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É:", err)
	} else {
		historyData, _ := json.Marshal(history)
		conn.WriteMessage(websocket.TextMessage, historyData) // ‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —ñ—Å—Ç–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
	}

	// –ß–µ–∫–∞—î–º–æ –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
	for {
		_, msg, err := conn.ReadMessage()
		if err != nil {
			log.Println("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è:", user.ID)
			mutex.Lock()
			delete(clients[roomID], conn)
			mutex.Unlock()
			break
		}

		// –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
		var payload MessagePayload
		if err := json.Unmarshal(msg, &payload); err != nil {
			log.Println("–ü–æ–º–∏–ª–∫–∞ JSON:", err)
			continue
		}

		// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
		message := entities.Messages{
			ID:        uuid.New(),
			UserId:    user.ID,
			RoomId:    roomID,
			Message:   payload.Message,
			CreatedAt: time.Now(),
		}
		db.Create(&message)

		// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º —É –∫—ñ–º–Ω–∞—Ç—ñ
		broadcastMessage(roomID, msg)
	}
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
func broadcastMessage(chatID uuid.UUID, message []byte) {
	mutex.Lock()
	defer mutex.Unlock()
	for client := range clients[chatID] {
		err := client.WriteMessage(websocket.TextMessage, message)
		if err != nil {
			client.Close()
			delete(clients[chatID], client)
		}
	}
}
